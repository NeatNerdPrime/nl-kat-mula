@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

skinparam linetype ortho

AddElementTag("micro_service", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

Title [WIP] C3 Component diagram for Scheduler System - Scheduler

ContainerQueue(message_bus, "Message Bus", "Kafka", "event stream")

Container_Boundary(scheduler, "Scheduler") {
  Component(listener, "Listener", "Socket", "Subscribes to event stream")
  ContainerQueue(pq, "PriorityQueue", "Heap Datastructure", "")
  Component(get_objects, "GetObjects", "Continuous", "Get random set of objects")
  Component(calculate_score, "CalculateScore", "Using a multitude of external services determine the priority or allowance for jobs of an object to be pushed to the queue.")

  Container_Boundary(api, "API") {
    Component(api_job_create, "JobCreateHandler", "API Endpoint", "Exposes filtered endpoints for worker to pop off items from queue")
    Component(api_job_pop, "JobPopHandler", "API Endpoint", "Exposes filtered endpoints for worker to pop off items from queue")
  }
}

ContainerDb(scheduler_db, "Scheduler Database", "PostgreSQL", "Persistence layer for internal state for the scheduler service", $tags = "storage")

Container(boefjes, "Boefjes", "micro service", "", $tags = "micro_service")
Container(normalizers, "Normalizers", "micro service", "", $tags = "micro_service")

' External systems
System_Ext(bytes, "Bytes", "Software System")
System_Ext(octopoes, "Octopoes", "Graph Database")
System_Ext(rocky, "Rocky", "Webapp", "Webapp")
'System_Ext(katalogus, "Katalogus", "Software System")

' Relationships
Rel_Down(rocky, octopoes, "Create object")
Rel_Down(rocky, api_job_create, "Create scan job")
Rel_Down(octopoes, message_bus, "Publish events")
Rel_Up(listener, message_bus, "Subscribes to events")

' Relationships within container
Rel_Down(listener, scheduler_db, "Add object to storage")
Rel_Down(listener, pq, "Remove/update jobs when necessary")
Rel_Up(scheduler_db, get_objects, "Get objects")
Rel_Up(get_objects, calculate_score, "Rank")
Rel_Up(calculate_score, pq, "Push")

Rel_Down(api_job_pop, pq, "Pop")
Rel_Down(api_job_create, pq, "Push job with highest priority")

Rel_Up(boefjes, api_job_pop, "Pop job from queue")
Rel_Up(normalizers, api_job_pop ,"Pop job from queue")

Rel(boefjes, bytes, "Post results")
Rel(bytes, normalizers, "Get results")

' Rel(octopoes, scheduler, "Reference for calculation")
' Rel(bytes, scheduler, "Reference for calculation")
' Rel(katalogus, scheduler, "Reference for calculation")
' Rel(rocky, scheduler, "Reference for calculation")

SHOW_LEGEND()

@enduml
