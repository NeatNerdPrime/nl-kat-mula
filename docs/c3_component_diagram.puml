@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

skinparam linetype ortho

AddElementTag("micro_service", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

Title [WIP] C3 Component diagram for Scheduler System - Scheduler

Container(message_bus, "Message Bus", "RabbitMQ", "event stream")

Container_Boundary(scheduler, "Scheduler") {
  Component(listener, "Listener", "Socket", "Subscribes to event stream")
  Component(cold_start, "Cold Start", "...", "Create/Update initial set of the internal state. Needs to run periodically or on restart.")
  Component(pq, "PriorityQueue", "Heap Datastructure", "")
  Component(calculate_score, "CalculateScore", "Function", "Get associated object and calculate score")
  Component(get_objects_from_frontier, "GetObjectsFromFrontier", "Continuous", "Get objects from frontier and create jobs to be pushed onto the queue")

  Component(api, "API", "RESTful API", "Exposes filtered endpoints for worker to pop off items from queue")
}

ContainerDb(scheduler_db, "Scheduler Database", "PostgreSQL", "Persistence layer for internal state for the scheduler service", $tags = "storage")


Container(boefjes, "Boefjes", "micro service", "", $tags = "micro_service")
Container(normalizers, "Normalizers", "micro service", "", $tags = "micro_service")

' External systems
System_Ext(bytes, "Bytes", "Software System")
System_Ext(octopoes, "Octopoes", "Graph Database")
System_Ext(rocky, "Rocky", "Webapp", "Webapp")
' System_Ext(katalogus, "Katalogus", "Software System")

' Relationships
Rel_Down(rocky, octopoes, "Create object")
Rel_Down(octopoes, message_bus, "Publish events")
Rel_Down(octopoes, cold_start, "Get OOI's")
Rel_Up(listener, message_bus, "Subscribes to events")

' Relationships within container
Rel_Down(listener, calculate_score, "Process event")
Rel_Down(cold_start, calculate_score, " ")
Rel(calculate_score, scheduler_db, "Insert/update/delete object")
Rel(scheduler_db, get_objects_from_frontier, "Get objects")
Rel_Right(get_objects_from_frontier, pq, "Push")
Rel_Left(api, pq, "Pop")

Rel_Up(boefjes, api, "Pop job from queue")
Rel_Up(normalizers, api,"Pop job from queue")

Rel(boefjes, bytes, "Post results")
Rel(bytes, normalizers, "Get results")

' Rel(octopoes, scheduler, "Reference for calculation")
' Rel(bytes, scheduler, "Reference for calculation")
' Rel(katalogus, scheduler, "Reference for calculation")
' Rel(rocky, scheduler, "Reference for calculation")

SHOW_LEGEND()

@enduml
